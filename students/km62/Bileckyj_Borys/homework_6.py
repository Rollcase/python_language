Skip to content
This repository
Search
Pull requests
Issues
Gist
 @Rollcase
 Watch 3
  Star 8
  Fork 72 tarys/python_language
 Code  Issues 0  Pull requests 79  Projects 0  Wiki  Pulse  Graphs
Tree: a15da6371f Find file Copy pathpython_language/students/km62/Malyarenko_Illya/homework_6.py
fe3ec7c  13 hours ago
@ASIMER ASIMER 6. list
1 contributor
RawBlameHistory     
423 lines (342 sloc)  16.5 KB
# task1------------------------------------------------------------
"""
Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...).
"""

# defaults
#Список вывода
list_output = []
# input
#Ввод списка и разбивка
list= input().split()
# main
for index in range(len(list)):
	#Проверка индекса на четность
    if index % 2 == 0:
        list_output.append(list[index])
# result
print(' '.join(list_output))

# -----------------------------------------------------------------


# task2------------------------------------------------------------
"""
Выведите все четные элементы списка. При этом используйте цикл for, перебирающий элементы списка, а не их индексы!
"""

# defaults
#Список вывода
list_output = []
# input
#Ввод списка и разбивка
list= input().split()
# main
for element in list:
    if element != ' ':
		#Проверка элемента на четность
        if int(element)%2 == 0:
            list_output.append(element)
# result
print(' '.join(list_output))

# -----------------------------------------------------------------


# task3------------------------------------------------------------
"""
Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.
"""


# defaults
#Список вывода
list_output = []
# input
#Ввод списка и разбивка
list= input().split()
# main
#Ввод переменной для сохранения пред. значеня.
element_buffer=list[0]
#Перебор элементов
for element in list:
    if element != ' ':
        #Сравнение элементов с временной переменной
        if float(element)>float(element_buffer):
            list_output.append(element)
    element_buffer = element
# result
print(' '.join(list_output))

# -----------------------------------------------------------------


# task4------------------------------------------------------------
"""
Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. Если соседних элементов одного знака нет — не выводите ничего. Если таких пар соседей несколько — выведите первую пару.
"""


# defaults
#Список вывода
list_output = []
# input
#Ввод списка и разбивка
list= input().split()
# main
#Ввод переменной для сохранения пред. значеня.
element_buffer=list[0]
#Перебор элементов из элементов после 1-го
for element in list[1:len(list)+1]:
    if element != ' ':
        #Сравнение элементов с временной переменной
        if float(element)/abs(float(element)) == float(element_buffer)/abs(float(element_buffer)):
            list_output.append(str(element_buffer)); list_output.append(str(element))
            break
    element_buffer = float(element)
# result
print(' '.join(list_output))

# -----------------------------------------------------------------


# task5------------------------------------------------------------
"""
Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей, и выведите количество таких элементов. Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей.
"""


# defaults
#Список вывода
list_output = []
counter = 0
# input
#Ввод списка и разбивка
list= input().split()
#Проверка длины списка
if len(list)>=3:
    # main
    #Ввод переменной для сохранения пред. значеня.
    element_buffer_first=list[0]
    element_buffer_second=list[1]
    #Перебор элементов из элементов после 1-го
    for element in list[2:len(list)+1]:
       if element != ' ':
            #Сравнение элементов с временной переменной
          if element_buffer_first < element_buffer_second > element:
             counter += 1
       element_buffer_first = element_buffer_second
       element_buffer_second = element
# result
print(counter)

# -----------------------------------------------------------------


# task6------------------------------------------------------------
"""
Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке. Если наибольших элементов несколько, выведите индекс первого из них.
"""


# defaults
index = 0
index_output = 0
# input
#Ввод списка и разбивка
list= input().split()
# main
#Ввод переменной для сохранения пред. значеня.
element_buffer=list[0]
#Перебор элементов
for element in list:
    if element != ' ':
        #Сравнение элементов с временной переменной
        if float(element)>float(element_buffer):
            element_buffer = element
            index_output = index
        index += 1

# result
print(element_buffer, index_output)

# -----------------------------------------------------------------

# task7------------------------------------------------------------
"""
Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. Помогите ему это сделать.
Программа получает на вход невозрастающую последовательность натуральных чисел, означающих рост каждого человека в строю. После этого вводится число X – рост Пети. Все числа во входных данных натуральные и не превышают 200.
Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, таким же, как у Пети, то он должен встать после них.
"""


# defaults
counter = 1
# input
#Ввод списка и разбивка
list= input().split()
height = float(input())
# main
#Ввод переменной для сохранения пред. значеня.
element_buffer=list[0]
#Перебор элементов
for element in list:
    if element != ' ':
        #Сравнение элементов с временной переменной
        if float(element)>=float(height):
            counter += 1
# result
print(counter)

# -----------------------------------------------------------------


# task8------------------------------------------------------------
"""
Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.
"""


# defaults
counter = 1
# input
#Ввод списка и разбивка
list= input().split()
# main
#Ввод переменной для сохранения пред. значеня.
element_buffer=list[0]
#Перебор элементов
for element in list:
    if element != ' ':
        #Сравнение элементов с временной переменной
        if float(element)!=float(element_buffer):
            counter += 1
        element_buffer = element
# result
print(counter)

# -----------------------------------------------------------------


# task9------------------------------------------------------------
"""
Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т. д.). Если элементов нечетное число, то последний элемент остается на своем месте.
"""


# defaults
counter_prew_index = 1
element_buffer = 0
# input
#Ввод списка и разбивка
list= input().split()
# main
#Проверка на четность длины списка
if len(list) % 2 != 0:
    max_count = len(list) - 1 #Создание переменной для счета в цикле for
else:
    max_count = len(list)
for i in range(0, max_count, 2):
    element_buffer = list[i]
    list[i] = list[i+1]
    list[i+1] = element_buffer
# result
print(' '.join(list))

# -----------------------------------------------------------------


# task10------------------------------------------------------------
"""
В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка.
"""


# defaults
index_counter = -1
index_max = 0
index_min = 0
# input
#Ввод списка и склейка
list= input().split()
# main
#Ввод переменной для сохранения пред. значеня.
min_element_buffer = list[0]
max_element_buffer = list[0]
#Перебор элементов
for element in list:
    index_counter += 1
    if element != ' ':
        if float(min_element_buffer) > float(element):
            min_element_buffer = element
            index_min = index_counter
        if float(max_element_buffer) < float(element):
            max_element_buffer = element     
            index_max = index_counter

element_buffer = list[index_min]
list[index_min] = list[index_max]
list[index_max] = element_buffer
# result
print(' '.join(list))


# -----------------------------------------------------------------


# task11------------------------------------------------------------
"""
Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k, сдвинув влево все элементы, стоящие правее элемента с индексом k.
Программа получает на вход список, затем число k. Программа сдвигает все элементы, а после этого удаляет последний элемент списка при помощи метода pop() без параметров.
Программа должна осуществлять сдвиг непосредственно в списке, а не делать это при выводе элементов. Также нельзя использовать дополнительный список. Также не следует использовать метод pop(k) с параметром.
"""


# input
#Ввод списка и разбивка
list= input().split()
index = int(input()) + 1
# main
while index < len(list):
    list[index-1] = list[index]
    index += 1
list.pop()
# result
print(' '.join(list))

# -----------------------------------------------------------------


# task12------------------------------------------------------------
"""
Дан список целых чисел, число k и значение C. Необходимо вставить в список на позицию с индексом k элемент, равный C, сдвинув все элементы, имевшие индекс не менее k, вправо.
Посколько при этом количество элементов в списке увеличивается, после считывания списка в его конец нужно будет добавить новый элемент, используя метод append.
Вставку необходимо осуществлять уже в считанном списке, не делая этого при выводе и не создавая дополнительного списка.
"""

# input
#Ввод списка и разбивка
list = input().split()
index_and_number = input().split()
# main
list.append(index_and_number[1])
index = len(list) - 1
while int(index_and_number[0]) < index:
    element_buffer = list[index-1]
    list[index-1] = list[index]
    list[index] = element_buffer
    index -= 1
# result
print(' '.join(list))


# -----------------------------------------------------------------


# task13------------------------------------------------------------
"""
Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
"""


#default
counter = 0
# input
#Ввод списка и разбивка
list= input().split()

# main
#Фиксация элемента
for element_iteration_1 in list:
    #Поиск пары
    for element_iteration_2 in list:
        if element_iteration_1 == element_iteration_2:
            counter += 1 #Добавляется лишняя 1, когда элемент выбирает себя
    counter -= 1#Удаление лишней еденицы
# result
print(counter/2) #Так как в паре 2 элемента, и каждый ищет пару, число будет в 2 раза больше чем пар

# -----------------------------------------------------------------


# task14------------------------------------------------------------
"""
Дан список. Выведите те его элементы, которые встречаются в списке только один раз. Элементы нужно выводить в том порядке, в котором они встречаются в списке.
"""


#default
#Список вывода
list_output = []
element_buffer = 0
counter = -1
# input
#Ввод списка и разбивка
list= input().split()
# main
#Перебор элементов из элементов после 1-го
for element in list:
    counter=-1
    for element_find in list:
        if counter == 1:
            break
        elif element == element_find:
            counter+=1
    if counter == 0:
        list_output.append(element)
# result
print(' '.join(list_output))


# -----------------------------------------------------------------


# task15------------------------------------------------------------
"""
N кеглей выставили в один ряд, занумеровав их слева направо числами от 1 до N. Затем по этому ряду бросили K шаров, при этом i-й шар сбил все кегли с номерами от li до ri включительно. Определите, какие кегли остались стоять на месте.
Программа получает на вход количество кеглей N и количество бросков K. Далее идет K пар чисел li, ri, при этом 1? li? ri? N.
Программа должна вывести последовательность из N символов, где j-й символ есть “I”, если j-я кегля осталась стоять, или “.”, если j-я кегля была сбита.
"""


#defaunt
list = []
# input
#Ввод списка и разбивка
list_instruction = input().split()
# main
for list_size in range(int(list_instruction[0])):
    list.append('I')
for number_kick in range (int(list_instruction[1])):
    list_kick = input().split()
    for index in range(int(list_kick[0])-1, int(list_kick[1]) ,1):
        list[index] = '.'
# result
print(''.join(list))

# -----------------------------------------------------------------

Contact GitHub API Training Shop Blog About
© 2016 GitHub, Inc. Terms Privacy Security Status Help